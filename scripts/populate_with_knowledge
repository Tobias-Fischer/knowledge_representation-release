#!/usr/bin/env python
import knowledge_representation
from knowledge_representation import LongTermMemoryConduit
import argparse
import sys
import os
import yaml


def add_attribute_entry(entity, entry, ltmc):
    keys = entry.keys()
    if "concept_name" in keys:
        concept = ltmc.get_concept(entry["concept_name"])
        entity.add_attribute_entity(entry["name"], concept)
    if "instance_name" in keys:
        instance_entity = ltmc.get_instance_named(entry["instance_name"])
        entity.add_attribute_entity(entry["name"], instance_entity)
    if "value" in keys:
        value = entry["value"]
        if isinstance(value, float):
            entity.add_attribute_float(entry["name"], value)
            return
        elif isinstance(value, int):
            entity.add_attribute_int(entry["name"], value)
            return
        elif isinstance(value, bool):
            entity.add_attribute_bool(entry["name"], value)
            return
        entity.add_attribute_str(entry["name"], entry["value"])


def populate(ltmc, file_path):
    if not os.path.isfile(file_path):
        print(
            "File not found at " + file_path + ".")
        return False
    data = read_yaml_from_file(file_path)

    if data.get("instances"):
        object_names = data["instances"].keys()
        # Get the id for each named entity
        object_name_to_entity = {name: ltmc.get_instance_named(name) for name in object_names}

        for name, attributes in data["instances"].items():
            for attribute in attributes:
                add_attribute_entry(object_name_to_entity[name], attribute, ltmc)

    if data.get("concepts"):
        concept_names = data["concepts"].keys()
        # Get the id for each named entity
        concept_name_to_entity = {name: ltmc.get_concept(name) for name in concept_names}

        for name, attributes in data["concepts"].items():
            for attribute in attributes:
                add_attribute_entry(concept_name_to_entity[name], attribute, ltmc)
    return True


def read_yaml_from_file(file_path):
    with open(file_path, 'r') as stream:
        try:
            contents = yaml.load(stream)
            return contents
        except yaml.YAMLError:
            print("File found at " + file_path + ", but cannot be parsed by YAML parser.")
            exit(1)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("file_paths", type=str, nargs="+")
    args = parser.parse_args()
    ltmc = knowledge_representation.get_default_ltmc()
    success = False
    for path in args.file_paths:
        success = populate(ltmc, path)
    exit_code = 0 if success else 1
    exit(exit_code)


if __name__ == "__main__":
    main()
